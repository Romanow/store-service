plugins {
    id "org.springframework.boot"
    id "org.jetbrains.kotlin.plugin.jpa"
    id "org.jetbrains.kotlin.plugin.spring"
    id "com.gorylenko.gradle-git-properties"
    id "com.adarshr.test-logger"
}

dependencies {
    implementation "org.springframework.cloud:spring-cloud-starter-gateway"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.security:spring-security-oauth2-resource-server"
    implementation "org.springframework.security:spring-security-oauth2-jose"

    implementation "io.micrometer:micrometer-tracing-bridge-otel"
    implementation "io.opentelemetry:opentelemetry-exporter-otlp"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "org.zalando:logbook-spring-boot-webflux-autoconfigure:$logbookVersion"
    implementation "org.codehaus.janino:janino"
    implementation "org.codehaus.janino:commons-compiler"
    implementation "net.logstash.logback:logstash-logback-encoder:$logstashEncoderVersion"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:$openApiVersion"
    implementation "ru.romanow.openapi:aggregator-by-tags:$aggregatorByTagsVersion"

    testImplementation "org.wiremock.integrations:wiremock-spring-boot:$wireMockVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-testcontainers"
    testImplementation "com.github.dasniko:testcontainers-keycloak:$keycloakContainerVersion"
}

gitProperties {
    dateFormat = "dd.MM.yyyy HH:mm:ss"
    dateFormatTimeZone = "Europe/Moscow"
    extProperty = "gitProps"
}

generateGitProperties.outputs.upToDateWhen { false }

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

tasks.register("copyOpenApi", Copy) {
    description = "Copy OpenAPI to resources/openapi"
    group = "build"

    def serviceDirs = file("$rootDir").listFiles().findAll {
        it.isDirectory() && it.name.endsWith("-service")
    }

    serviceDirs.each { serviceDir ->
        def openApiDir = new File(serviceDir, "openapi")
        if (openApiDir.exists()) {
            from(openApiDir) { include "**/*.yaml", "**/*.yml" }
        }
    }

    into("$projectDir/src/main/resources/openapi")
}

bootJar {
    archiveFileName = "${project.name}.jar"
    manifest {
        attributes(
            "Application-Name": "${rootProject.name}",
            "Application-Version": "${project.version}",
            "Git-Branch": "${-> project.ext.gitProps["git.branch"]}",
            "Build-Revision": "${-> project.ext.gitProps["git.commit.id.abbrev"]}",
            "Commit-Time": "${-> project.ext.gitProps["git.commit.time"]}"
        )
    }
}

jar {
    enabled = false
}

testlogger {
    theme "mocha"
}
