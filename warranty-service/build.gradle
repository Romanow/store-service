plugins {
    id "org.springframework.boot"
    id "org.jetbrains.kotlin.plugin.jpa"
    id "org.jetbrains.kotlin.plugin.spring"
    id "com.gorylenko.gradle-git-properties"
    id "com.adarshr.test-logger"
}

dependencies {
    implementation project(":common-service")

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-testcontainers"
    testImplementation "org.testcontainers:postgresql:$postgresContainerVersion"
    testImplementation "com.github.dasniko:testcontainers-keycloak:$keycloakContainerVersion"
}

gitProperties {
    dateFormat = "dd.MM.yyyy HH:mm:ss"
    dateFormatTimeZone = "Europe/Moscow"
    extProperty = "gitProps"
}

generateGitProperties.outputs.upToDateWhen { false }

tasks.register("serverCodeGeneration", org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "kotlin-spring"
    ignoreFileOverride = "$rootDir/openapi/.openapi-generator-ignore"
    templateDir = "$rootDir/openapi/templates"
    configFile = "$rootDir/openapi/server-config.yml"
    configOptions = [
        apiPackage  : "ru.romanow.services.warranty.web",
        modelPackage: "ru.romanow.services.warranty.model"
    ]
    typeMappings = [
        'DateTime': 'LocalDateTime',
    ]

    inputSpec = "$rootDir/warranty-service/openapi/warranty-service.yml"
    outputDir = "$buildDir/generated"
}

tasks.register("warehouseCodeGeneration", org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "kotlin"
    ignoreFileOverride = "$rootDir/openapi/.openapi-generator-ignore"
    templateDir = "$rootDir/openapi/templates"
    configFile = "$rootDir/openapi/client-config.yml"
    configOptions = [
        packageName  : "ru.romanow.services.warehouse"
    ]
    typeMappings = [
        'DateTime': 'LocalDateTime',
    ]

    inputSpec = "$rootDir/warehouse-service/openapi/warehouse-service.yml"
    outputDir = "$buildDir/generated"
}

tasks.register("generateCodeByContracts") {
    dependsOn serverCodeGeneration
    dependsOn warehouseCodeGeneration
}

runKtlintCheckOverMainSourceSet.dependsOn(tasks.generateCodeByContracts)
compileKotlin.dependsOn(tasks.generateCodeByContracts)

sourceSets {
    main {
        java {
            srcDir "${buildDir}/generated/src/main/kotlin"
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

bootJar {
    archiveFileName = "${project.name}.jar"
    manifest {
        attributes(
            "Application-Name": "${rootProject.name}",
            "Application-Version": "${project.version}",
            "Git-Branch": "${-> project.ext.gitProps["git.branch"]}",
            "Build-Revision": "${-> project.ext.gitProps["git.commit.id.abbrev"]}",
            "Commit-Time": "${-> project.ext.gitProps["git.commit.time"]}"
        )
    }
}

jar {
    enabled = false
}

testlogger {
    theme "mocha"
}
